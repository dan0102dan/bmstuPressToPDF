import puppeteer from 'puppeteer'
import { PDFDocument } from 'pdf-lib'
import { bot } from '../tools'
import { getBook, getBookURL } from './'
// import { setTimeout } from 'timers/promises'
import { dir, libDir } from '../config'
import fs from 'fs'

export default async (chatId, bookId) => {
    const mes = await bot.telegram.sendMessage(chatId, '–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏!')
    // await setTimeout(2500)

    try {
        const book = await getBook(bookId)
        const url = await (await getBookURL(book.readerLink))
        console.log(book, url)

        await bot.telegram.sendMessage(
            chatId,
            `<b>${book.name}</b>\n\n<b>–ê–≤—Ç–æ—Ä:</b> ${book.author}\n<b>–ü—Ä–µ–¥–º–µ—Ç:</b> ${book.subject}\n<b>–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:</b> ${book.year}\n<b>–ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:</b> ${book.pagesCount}\n<a href="${book.cover}">–û–±–ª–æ–∂–∫–∞</a>`,
            { parse_mode: 'HTML' }
        )

        const libPath = `${libDir}/${bookId}.pdf`
        if (fs.existsSync(libPath)) {
            await bot.telegram.editMessageText(
                chatId, mes.message_id, '',
                '–ù–∞—à–ª–∏ –≤ –±–∞–∑–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º!'
            )

            await bot.telegram.sendDocument(
                chatId,
                {
                    source: libPath,
                    filename: `${book.name}.pdf`
                }
            )
        }
        else {
            await bot.telegram.editMessageText(
                chatId, mes.message_id, '',
                '–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...'
            )
            const browser = await puppeteer.launch({
                args: ['--no-sandbox', '--disable-setuid-sandbox', '--headless', '--disable-gpu', '--disable-dev-shm-usage', '--disable-gpu', '--disable-software-rasterizer', '--disable-features=DefaultPassthroughCommandDecoder', '--disable-gpu-sandbox']
            })

            fs.mkdirSync(dir, { recursive: true })
            const bookPath = `${dir}/${[...Array(20)].map(() => (~~(Math.random() * 36)).toString(36)).join('')}.pdf`

            await bot.telegram.editMessageText(
                chatId, mes.message_id, '',
                '–ó–∞–≥—Ä—É–∂–∞–µ–º...'
            )

            for (let page = 1; page <= book.pagesCount; page++) {
                const XhtmlURL = url + 'mybook' + page.toString().padStart(4, '0') + '.xhtml'

                const tab = await browser.newPage()
                await tab.goto(XhtmlURL, { timeout: 0, waitUntil: 'networkidle0' })
                console.log(`${page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (${XhtmlURL})`)
                const buffer = await tab.pdf({
                    pageRanges: '1-1',
                    printBackground: true,
                    preferCSSPageSize: true,
                    format: 'A5',
                })
                await tab.close()

                const pdfDoc = (page === 1) ? await PDFDocument.create() : await PDFDocument.load(fs.readFileSync(bookPath), { updateMetadata: false })
                if (page === 1) {
                    pdfDoc.setTitle(book.name)
                    pdfDoc.setAuthor(book.author)
                    pdfDoc.setSubject(book.subject)
                    pdfDoc.setCreationDate(new Date(book.year, 0))
                    pdfDoc.setProducer('studentinator corporation')
                    pdfDoc.setCreator('–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ú–ì–¢–£ –∏–º. –ù. –≠. –ë–∞—É–º–∞–Ω–∞')
                }

                const pdf = await PDFDocument.load(buffer)
                const copiedPages = await pdfDoc.copyPages(pdf, pdf.getPageIndices())
                copiedPages.forEach((e) => pdfDoc.addPage(e))

                fs.writeFileSync(bookPath, await pdfDoc.save())

                await bot.telegram.editMessageText(
                    chatId, mes.message_id, '',
                    `–ó–∞–≥—Ä—É–∑–∫–∞... (${(page / book.pagesCount * 100).toFixed(2)}%)`
                )
            }
            fs.mkdirSync(`${libDir}`, { recursive: true })
            fs.copyFileSync(bookPath, libPath)

            await browser.close()

            await bot.telegram.editMessageText(
                chatId, mes.message_id, '',
                '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            )
            await bot.telegram.sendDocument(
                chatId,
                {
                    source: bookPath,
                    filename: `${book.name}.pdf`
                }
            )
            fs.rmSync(bookPath)
        }

        await bot.telegram.deleteMessage(chatId, mes.message_id)
    }
    catch (e) {
        console.error(e)

        bot.telegram.sendMessage(768331152, `error: ${e}`)
        switch (e.response?.status || e.response?.error_code) {
            case 403:
                return await bot.telegram.editMessageText(
                    chatId, mes.message_id, '',
                    '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
                )
            case 404:
                return await bot.telegram.editMessageText(
                    chatId, mes.message_id, '',
                    '–ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :('
                )
            case 400:
                return await bot.telegram.editMessageText(
                    chatId, mes.message_id, '',
                    '–°–∞–π—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üìõ'
                )
            default:
                return await bot.telegram.editMessageText(
                    chatId, mes.message_id, '',
                    '–ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –≤—ã—è—Å–Ω—è–µ–º'
                )
        }
    }
}