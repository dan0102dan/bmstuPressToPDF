import { Scenes, Markup } from 'telegraf'
import puppeteer from 'puppeteer'
import { PDFDocument } from 'pdf-lib'
import { getBook, getBookURL } from '../../../../functions'

interface WizardSession extends Scenes.WizardSessionData {
	mesWithCancel: any
	bookID: number
}

async function sendBook(ctx) {
	try {
		const mes = await ctx.reply('–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...')
		const browser = await puppeteer.launch({
			args: ['--no-sandbox', '--disable-setuid-sandbox', '--headless', '--disable-gpu']
		})
		await ctx.telegram.editMessageText(
			ctx.chat.id, mes.message_id, '',
			'–°–æ–∑–¥–∞—ë–º PDF –¥–æ–∫—É–º–µ–Ω—Ç...'
		)
		const pdfDoc = await PDFDocument.create()

		await ctx.telegram.editMessageText(
			ctx.chat.id, mes.message_id, '',
			'–ó–∞–≥—Ä—É–∂–∞–µ–º...'
		)
		const book = await getBook(ctx.scene.session.bookID)

		const url = await getBookURL(book.readerLink)

		await ctx.reply(
			`<b>¬´${book.name}¬ª</b>\n\n<b>–ê–≤—Ç–æ—Ä:</b> ${book.author}\n<b>–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:</b> ${book.year}\n<b>–ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:</b> ${book.pagesCount}\n<a href="${book.cover}">–û–±–ª–æ–∂–∫–∞</a>`,
			{ parse_mode: 'HTML' }
		)

		for (let page = 1; page <= book.pagesCount; page++) {
			const XhtmlURL = url + 'mybook' + page.toString().padStart(4, '0') + '.xhtml'
			// console.log(XhtmlURL)

			const tab = await browser.newPage()
			await tab.goto(XhtmlURL, { timeout: 0, waitUntil: 'networkidle0' })
			console.log(`${page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`)
			const buffer = await tab.pdf({
				pageRanges: '1-1',
				printBackground: true,
				preferCSSPageSize: true,
				format: 'A5',
			})
			await tab.close()

			const pdf = await PDFDocument.load(buffer)
			const copiedPages = await pdfDoc.copyPages(pdf, pdf.getPageIndices())
			copiedPages.forEach((e) => pdfDoc.addPage(e))

			await ctx.telegram.editMessageText(
				ctx.chat.id, mes.message_id, '',
				`–ó–∞–≥—Ä—É–∑–∫–∞... (${(page / book.pagesCount * 100).toFixed(2)}%)`
			)
		}

		await browser.close()

		await ctx.telegram.editMessageText(
			ctx.chat.id, mes.message_id, '',
			'–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
		)

		await ctx.replyWithDocument(
			{
				source: Buffer.from(await pdfDoc.save()),
				filename: `${book.name}.pdf`
			}
		)
		await ctx.telegram.deleteMessage(ctx.chat.id, mes.message_id)
	}
	catch (e) {
		console.error(e)
		ctx.telegram.sendMessage(768331152, `error: ${e}`)
		switch (e.response?.status || e.response?.error_code) {
			case 403:
				return await ctx.reply('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
			case 404:
				return await ctx.reply('–ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :(')
			case 400:
				return await ctx.reply('–°–∞–π—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üìõ')
			default:
				return await ctx.reply('–ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –≤—ã—è—Å–Ω—è–µ–º')
		}
	}
}

export default new Scenes.WizardScene<Scenes.WizardContext<WizardSession>>(
	'getbook',
	async (ctx) => {
		ctx.scene.session.mesWithCancel = await ctx.reply(
			'–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–∏–≥—É ‚úèÔ∏è',
			Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞ ‚ùå', 'cancel')])
		)

		return ctx.wizard.next()
	},
	async (ctx) => {
		if ('reply_markup' in ctx.scene.session.mesWithCancel)
			ctx.scene.session.mesWithCancel = await ctx.telegram.editMessageReplyMarkup(
				ctx.chat.id, ctx.scene.session.mesWithCancel.message_id, '',
				Markup.inlineKeyboard([]).reply_markup
			)

		ctx.scene.session.bookID = Number('text' in ctx.message && ctx.message.text.replace(/[^0-9]/g, ''))
		if (!ctx.scene.session.bookID) {
			ctx.scene.session.mesWithCancel = await ctx.reply(
				'–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üëÄ',
				Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞ ‚ùå', 'cancel')])
			)
			return
		}

		sendBook(ctx)

		return ctx.scene.leave()
	}
)